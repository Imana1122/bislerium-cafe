 @inherits LayoutComponentBase

@using Application.Service.Notifications



<div class="bb-page">
    <AuthorizeView Policy="UserPolicy">

    <Sidebar @ref="sidebar"
             IconName="IconName.BootstrapFill"
             Title="Blazor Bootstrap"
             DataProvider="SidebarDataProvider" />
    </AuthorizeView>
    <AuthorizeView Policy="AdministrationPolicy">
        <Sidebar @ref="sidebar"
                 IconName="IconName.BootstrapFill"
                 Title="Blazor Bootstrap"
                 DataProvider="SidebarDataProviderAdmin" />
    </AuthorizeView>

    <main>
        <AuthorizeView>
            <NotAuthorized>
                 <div class="bb-top-row px-4 d-flex justify-content-between align-items-center">
                      <a href="/app/home" class="brand-link">
                        <img src="assets/images/logo.svg" style="width: 5rem; opacity: .8" />
                     </a>
                    <!-- Logout Button -->
                
                        <a href="Account/Login">
                            <button type="button" class="nav-link fw-bold text-primary">
                                <i class="bi bi-box-arrow-right text-primary"></i> Login
                            </button>
                        </a>

                </div>
            </NotAuthorized>
        </AuthorizeView>
        
            <div class="bb-top-row px-4 d-flex justify-content-end align-items-center">
                
                <div class="nav-item px-3 mt-auto d-flex justify-content-center align-items-center">

                    <AuthorizeView Policy="UserPolicy">
                        <a href="notifications" class="mr-2">
                            @if (@notificationCount.notificationsCount > 0)
                        {
                            <div class="position-relative">
                                <i class="bi bi-bell"></i>
                                <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                                        @notificationCount.notificationsCount
                                </span>
                            </div>
                        }
                        else
                        {
                            <i class="bi bi-bell"></i>
                        }
                        </a>

                   
                    </AuthorizeView>
                    <AuthorizeView>
                   
                        <!-- mt-auto for margin-top: auto to push it to the bottom -->
                        <form action="Account/Logout" method="post">
                            <AntiforgeryToken />
                            <button type="submit" class="nav-link fw-bold text-danger">
                                <i class="bi bi-box-arrow-right text-danger"></i> Logout
                            </button>
                        </form>
                     </AuthorizeView>
                      

               
                </div>
            </div>
       

        <article class="content px-4">
            <div class="py-2 overflow-auto">@Body</div>
        </article>
    </main>

</div>

@code {
    BlazorBootstrap.Sidebar sidebar;
    IEnumerable<NavItem> navItems;
    private HubConnection hubConnection;
    [Inject]
    protected AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Retrieve the authentication state
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        // Check if the user is authenticated
        if (user.Identity.IsAuthenticated)
        {
            // Set the user ID in the blog model
            if (Guid.TryParse(user.FindFirstValue(ClaimTypes.NameIdentifier), out Guid UserId))
            {
                await notificationCount.GetActiveOrdersCount(UserId);

                hubConnection = netcodeHubConnectionService.GetHubConnection();
                if (hubConnection.State == HubConnectionState.Disconnected)
                {
                    await hubConnection.StartAsync();
                }
                hubConnection.On<string, string>("Notification", async (userId, message) =>
                {

                    try
                    {
                       
                        await InvokeAsync(async () =>
                         {
                                if (UserId.ToString().ToLower() == userId.ToString().ToLower())
                                {
                                 await js.InvokeVoidAsync("alert", message);
                                     await notificationCount.GetActiveOrdersCount(UserId);

                                     StateHasChanged();
                                }
                               
                        });

                        
                    }
                    catch(Exception ex)
                    {
                        await toast.ShowError(ex.Message);
                    }
                });

            }
        }
    }

  
    private async Task<SidebarDataProviderResult> SidebarDataProvider(SidebarDataProviderRequest request)
    {
        if (navItems is null)
            navItems = GetUserNavItems();

        return await Task.FromResult(request.ApplyTo(navItems));
    }
    private async Task<SidebarDataProviderResult> SidebarDataProviderAdmin(SidebarDataProviderRequest request)
    {
        if (navItems is null)
            navItems = GetNavItems();

        return await Task.FromResult(request.ApplyTo(navItems));
    }

    private IEnumerable<NavItem> GetNavItems()
    {
        var navItems = new List<NavItem>();


        var adminPolicyNavItems = new List<NavItem>
    {
        new NavItem { Id = "2", Href = "/admin/dashboard", IconName = IconName.ListNested, Text = "Dashboard" },
        new NavItem { Id = "4", Href = "/top10/index", IconName = IconName.ListNested, Text = "Top10" },
         new NavItem { Id = "8", Href = "/admins/index", IconName = IconName.ListNested, Text = "Admins" },
    };

        var settingsNavItems = new List<NavItem>
    {
        new NavItem { Id = "5", Href = "/profile", IconName = IconName.ListNested, Text = "Profile" },
        new NavItem { Id = "6", Href = "/change-password", IconName = IconName.ListNested, Text = "Change Password" },
        new NavItem { Id = "7", Href = "/settings", IconName = IconName.ListNested, Text = "Settings" }
    };





        navItems.AddRange(adminPolicyNavItems);


        navItems.AddRange(settingsNavItems);

        return navItems;
    }

    private IEnumerable<NavItem> GetUserNavItems()
    {
        var navItems = new List<NavItem>();

        // Add common navigation items
        navItems.Add(new NavItem { Id = "1", Href = "/app/home", IconName = IconName.HouseDoorFill, Text = "Home", Match = NavLinkMatch.All });

        // Add navigation items based on policies
        var userPolicyNavItems = new List<NavItem>
    {
        new NavItem { Id = "2", Href = "/blogs/create", IconName = IconName.PlusSquareFill, Text = "Create Blog" },
        new NavItem { Id = "3", Href = "/blogs/index", IconName = IconName.ListNested, Text = "My Blogs" },
         new NavItem { Id = "8", Href = "/history", IconName = IconName.PlusSquareFill, Text = "History" },
    };


        var settingsNavItems = new List<NavItem>
    {
        new NavItem { Id = "5", Href = "/profile", IconName = IconName.ListNested, Text = "Profile" },
        new NavItem { Id = "6", Href = "/change-password", IconName = IconName.ListNested, Text = "Change Password" },
        new NavItem { Id = "7", Href = "/settings", IconName = IconName.ListNested, Text = "Settings" },

    };


        navItems.AddRange(userPolicyNavItems);


        navItems.AddRange(settingsNavItems);

        return navItems;
    }

    



}


<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>