@page "/Account/Login"

<div class="container-fluid d-flex justify-content-center align-items-center vh-100">
   
		
            <EditForm Model="LoginModel" method="post" OnValidSubmit="LoginAsync" FormName="login" Enhance>
                <div class="card text-dark p-5 border-none" style="border-radius: 24px; min-width: 300px;">
                   
                    <div class="card-header text-dark fs-4 border-primary">
                        <a href="/app/home" class="brand-link">
                            <img src="assets/images/logo.svg" style="width: 14rem; opacity: .8" />
                        </a>
                    </div>
                    <div class="card-body">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label for="email" class="form-label">Email Address</label>
                            <InputText id="email" @bind-Value="LoginModel.Email" class="form-control" autocomplete="username" />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <InputText id="password" type="password" @bind-Value="LoginModel.Password" class="form-control" autocomplete="current-password" />
                        </div>

                        <div class="mb-3">
                            <button class="btn btn-success w-100">Login</button>
                        </div>
                        <div class="text-right">
                            <a href="ForgotPassword" class="text-decoration-none"><p class="text-sm-center text-dark">Forgot Password?</p></a>
                        </div>

                        <hr class="text-primary" />

                        <div class="text-center">
                            <a href="Account/Register" class="text-decoration-none">New? Register</a>
                            
                        </div>
                        
                    </div>

                    <div class="card-footer mt-3">
                        @if (!string.IsNullOrEmpty(ErrorMessage))
                        {
                            <div class="alert alert-danger">@ErrorMessage</div>
                        }
                        else
                        {
                            <ValidationSummary class="text-danger" />
                        }
                    </div>
                </div>
            </EditForm>
        
</div>


@code{
    string ErrorMessage = "";
    public bool IsBusy { get; set; } =false;
    [SupplyParameterFromForm]
    private LoginUserRequestDTO LoginModel { get; set; } = new();
    private async Task LoginAsync()
    {
        if (IsBusy) return;
        ErrorMessage = "";
        IsBusy = true;
        var response = await accountService.LoginAsync(LoginModel);
        if (!response.Flag)
        {
            IsBusy = false;
            ErrorMessage = response.Message;
            return;
        }
        IsBusy = false;
        NavManager.NavigateTo( "/app/home", true);
    }

    [CascadingParameter]
    public Task<AuthenticationState> ClientAuthState { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await accountService.SetUpAsync();
        if (ClientAuthState != null)
        {
       
            if ((await ClientAuthState!).User.Identity!.IsAuthenticated == true)
            {
                NavManager.NavigateTo("/app/home", false, true);
            }
        }
           
       
    }



}
