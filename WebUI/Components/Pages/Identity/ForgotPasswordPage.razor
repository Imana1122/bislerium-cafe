@page "/ForgotPassword"


<div class="container-fluid d-flex justify-content-center align-items-center vh-100">
    <div class="row justify-content-center">
        <div class="card border-primary shadow-lg text-dark p-5" style="border-radius: 24px; min-width: 300px;">
            <div class="card-header text-dark fs-4 border-primary">ForgotPassword</div>
            <div class="card-body">
                <div class="mb-3">
                    <label for="email" class="form-label">Email Address</label>
                    <InputText id="email" @bind-Value="email" class="form-control" autocomplete="username" />
                </div>
                <div class="mb-3">
                    <button class="btn btn-success w-100" @onclick="ForgotPasswordAsync">Send</button>
                </div>
                <hr class="text-primary" />
                <div class="text-center">
                    <a href="Account/Login" class="text-decoration-none">Remember your password?</a>
                </div>
            </div>
            <div class="card-footer mt-3">
                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <div class="alert alert-danger">@ErrorMessage</div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    string ErrorMessage = "";
    public bool IsBusy { get; set; } = false;
    public string email { get; set; }

    private async Task ForgotPasswordAsync()
    {
        if (IsBusy) return;
        ErrorMessage = "";
        IsBusy = true;

        var uri = new Uri(NavManager.Uri);
        var scheme = uri.Scheme;
        var host = uri.Host;
        
        var port = uri.Port;
               

        var response = await accountService.ForgotPassword(email, scheme, host,port);
        if (!response.Flag)
        {
            IsBusy = false;
            ErrorMessage = response.Message;
            return;
        }
        await toast.ShowSuccess(response.Message);
        IsBusy = false;
        // NavManager.NavigateTo("/Account/Login", true);
    }

    [CascadingParameter]
    public Task<AuthenticationState> ClientAuthState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (ClientAuthState != null)
        {
            if ((await ClientAuthState!).User.Identity!.IsAuthenticated == true)
            {
                NavManager.NavigateTo("/app/home", false, true);
            }
        }
    }
}
