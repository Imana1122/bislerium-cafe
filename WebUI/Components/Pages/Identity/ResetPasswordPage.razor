@page "/Account/ResetPassword"

<div class="container-fluid d-flex justify-content-center align-items-center vh-100">
    <div class="row justify-content-center">

        <EditForm Model="ResetPasswordModel" method="post" OnValidSubmit="ResetPasswordAsync" FormName="login" Enhance>
            <div class="card border-primary shadow-lg text-dark p-5" style="border-radius: 24px; min-width: 300px;">
                <div class="card-header text-dark fs-4 border-primary">ResetPassword</div>
                <div class="card-body">
                    <DataAnnotationsValidator />

                    <div class="mb-3">
                        <label for="password" class="form-label">Password</label>
                        <InputText id="password" type="password" @bind-Value="ResetPasswordModel.Password" class="form-control" autocomplete="password" aria-labelledby="password-label" />
                    </div>

                    <div class="mb-3">
                        <label for="confirmPassword" class="form-label">Confirm Password</label>
                        <InputText id="confirmPassword" type="password" @bind-Value="ResetPasswordModel.ConfirmPassword" class="form-control" autocomplete="new-password" aria-labelledby="confirmPassword-label" />
                    </div>



                    <div class="mb-3">
                        <button class="btn btn-success w-100">Reset</button>
                    </div>

                    <hr class="text-primary" />

                    <div class="text-center">
                        <a href="Account/Login" class="text-decoration-none">Remember your password?</a>

                    </div>

                </div>

                <div class="card-footer mt-3">
                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <div class="alert alert-danger">@ErrorMessage</div>
                    }
                    else
                    {
                        <ValidationSummary class="text-danger" />
                    }
                </div>
            </div>
        </EditForm>
    </div>
</div>


@code {
    string ErrorMessage = "";
    public bool IsBusy { get; set; } = false;
    [SupplyParameterFromForm]
    private ResetPasswordRequestDTO ResetPasswordModel { get; set; } = new();


    protected override void OnInitialized()
    {
        var uri = new Uri(NavManager.Uri);
        var query = uri.Query;

        if (!string.IsNullOrEmpty(query))
        {
            var parameters = System.Web.HttpUtility.ParseQueryString(query);


            ResetPasswordModel.Email = parameters["email"];
            ResetPasswordModel.Token = parameters["token"];
        }
    }

    [CascadingParameter]
    public Task<AuthenticationState> ClientAuthState { get; set; }
    protected override async Task OnInitializedAsync()
    {
        if (ClientAuthState != null)
        {

            if ((await ClientAuthState!).User.Identity!.IsAuthenticated == true)
            {
                NavManager.NavigateTo("/app/home", false, true);
            }
        }


    }

    private async Task ResetPasswordAsync()
    {
        if (IsBusy) return;
        ErrorMessage = "";
        IsBusy = true;
        var response = await accountService.ResetPassword(ResetPasswordModel);
        if (!response.Flag)
        {
            IsBusy = false;
            ErrorMessage = response.Message;
            return;
        }
        IsBusy = false;
        NavManager.NavigateTo("/Account/Login", true);
    }

    



}
