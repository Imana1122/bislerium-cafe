@page "/admins/index"
@using Application.DTO.Response.Identity
@attribute [Authorize(Policy = "AdministrationPolicy")]

<section class="content-header">
    <div class="container-fluid my-2">
        <div class="row mb-2">
            @if (Create)
            {
                <div class=" text-right">
                    <a href="admins/create" class="btn btn-primary">New Admin</a>
                </div>
            }
            
        </div>
    </div>
    <!-- /.container-fluid -->
</section>
<div class="control-section">
    <div class="row">
        <div class="col-12">
            <Card >
                <CardBody>
                    <CardTitle>Admins</CardTitle>
                    <Grid TItem="GetUserWithClaimResponseDTO" class="table table-hover table-bordered table-striped" DataProvider="AdminDataProvider" AllowFiltering="true" Responsive="true" AllowPaging="true" PageSize="5" AllowSorting="true">
                        <GridColumn TItem="GetUserWithClaimResponseDTO" HeaderText="Name" PropertyName="Name">
                            
                                @context.Name
                           
                        </GridColumn>
                        <GridColumn TItem="GetUserWithClaimResponseDTO" HeaderText="Email" PropertyName="Email">
                            @context.Email
                        </GridColumn>
                        <GridColumn TItem="GetUserWithClaimResponseDTO" HeaderText="Role" PropertyName="Role">
                            @context.RoleName
                        </GridColumn>
                        <GridColumn TItem="GetUserWithClaimResponseDTO" HeaderText="Delete" PropertyName="Delete">
                            @context.Delete
                        </GridColumn>
                        <GridColumn TItem="GetUserWithClaimResponseDTO" HeaderText="Update" PropertyName="Update">
                            @context.Update
                        </GridColumn>
                        <GridColumn TItem="GetUserWithClaimResponseDTO" HeaderText="Create" PropertyName="Create">
                            @context.Create
                        </GridColumn>
                        
                            @if (Update || Delete)
                            {
                                <GridColumn TItem="GetUserWithClaimResponseDTO" HeaderText="Action" PropertyName="Action" Filterable="false">
                                @if (context.RoleName != "Admin")
                                {
                                    @if (Update)
                                    {
                                        <button type="button" @onclick="() => openEditModal(Guid.Parse(context.UserId)) " class="text-danger w-4 h-4 mr-1">
                                            <svg class="filament-link-icon w-4 h-4 mr-1" style="width:20px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                                <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z"></path>
                                            </svg>
                                        </button>
                                    }
                                    @if (Delete)
                                    {
                                        <button type="button" @onclick="() => {deleteUserId=Guid.Parse(context.UserId); deleteConfirmPopup = true; }" class="text-danger w-4 h-4 mr-1">
                                            <svg wire:loading.remove.delay="" style="width:20px" wire:target="" class="filament-link-icon w-4 h-4 mr-1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                                <path ath fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                                            </svg>
                                        </button>
                                    }
                                }



                                </GridColumn>
                            }

                        

                        

                    </Grid>


                </CardBody>
            </Card>

        </div>
    </div>
</div>

@if (deleteConfirmPopup)
{
    <!-- Delete Confirmation Modal -->
    <div class="modal" tabindex="-1" role="dialog" style="display: block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmation Required</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="() => deleteConfirmPopup = false"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete the blogger?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" @onclick="()=>DeleteAdmin(deleteUserId)">Delete</button>
                    <button type="button" class="btn btn-secondary" @onclick="() => deleteConfirmPopup = false">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}

@if (editPopup)
{
    <!-- Delete Confirmation Modal -->
    <div class="modal" tabindex="-1" role="dialog" style="display: block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit @editUser.Name</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="() => deleteConfirmPopup = false"></button>
                </div>
                <div class="modal-body">
                   
                    <div class="mb-3">
                        <label for="create">Create:</label>
                        <input id="create" type="checkbox" @bind="editUser.Create" />
                    </div>
                    <div class="mb-3">
                        <label for="update">Update:</label>
                        <input id="update" type="checkbox" @bind="editUser.Update" />
                    </div>
                    <div class="mb-3">
                        <label for="delete">Delete:</label>
                        <input id="delete" type="checkbox" @bind="editUser.Delete" />
                    </div>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" @onclick="()=>UpdateAdmin(editUser)">Save</button>
                    <button type="button" class="btn btn-secondary" @onclick="() => deleteConfirmPopup = false">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    private bool deleteConfirmPopup = false;
    string ErrorMessage = "";
    public bool IsBusy { get; set; } = false;
    private Guid deleteUserId;
    private bool Update;
    private bool Delete;
    private bool Create;
    public ChangeUserClaimRequestDTO editUser { get; set; }
    public IEnumerable<GetUserWithClaimResponseDTO> Admins { get; set; } = [];
    public AuthenticationState myState { get; set; }
    public bool editPopup = false;
    private Guid editUserId;
    [Inject]
    protected AuthenticationStateProvider AuthenticationStateProvider { get; set; }
    private SemaphoreSlim semaphore = new SemaphoreSlim(1, 1); // Initialize semaphore with initial count 1

    protected override async void OnInitialized()
    {
        await semaphore.WaitAsync(); // Wait until semaphore is available

    }




    protected override async Task OnInitializedAsync()
    {



        try
        {
            var scope = serviceProvider.CreateScope();
            var result = await accountService.GetUserWithClaimAsync();
            Admins = result;
            var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            myState = authenticationState;

            if(authenticationState != null)
            {
                Update = customAuthorizationService.CustomClaimChecker((myState!).User, DefaultClaims.Update);
                Delete = customAuthorizationService.CustomClaimChecker((myState!).User, DefaultClaims.Delete);
                Create = customAuthorizationService.CustomClaimChecker((myState!).User, DefaultClaims.Create);
            }



        }
        finally
        {
            semaphore.Release(); // Release the semaphore after Admins is set
        }
    }

    private async Task<GridDataProviderResult<GetUserWithClaimResponseDTO>> AdminDataProvider(GridDataProviderRequest<GetUserWithClaimResponseDTO> request)
    {
        await semaphore.WaitAsync(); // Wait until semaphore is available

        try
        {
            return request.ApplyTo(Admins);
        }
        finally
        {
            semaphore.Release(); // Release the semaphore after processing Admins
        }
    }

    private async void openEditModal(Guid Id)
    {
        var admin = Admins.FirstOrDefault(user => user.UserId.ToString().ToLower().Equals(Id.ToString().ToLower()));
        if(admin != null)
        {
            editUser = admin.Adapt(new ChangeUserClaimRequestDTO());

            editPopup = true;
        }
        else
        {
            await toast.ShowError("NO USER FOUND");
        }

        

    }






    private async Task DeleteAdmin(Guid deleteUserId)
    {
        if (IsBusy) return;
        if (!Delete) return;

        ErrorMessage = "";
        IsBusy = true;


        var response = await accountService.DeleteAccountAsync(deleteUserId.ToString());

        if (!response.Flag)
        {
            IsBusy = false;
            ErrorMessage = response.Message;
            await toast.ShowError(response.Message);

        }
        else
        {
            await toast.ShowSuccess(response.Message);
            NavManager.NavigateTo("/admins/index", true);

        }

        IsBusy = false;
    }

    private async Task UpdateAdmin (ChangeUserClaimRequestDTO user)
    {
        if (!Update) return;

        if (IsBusy) return;

        ErrorMessage = "";
        IsBusy = true;


        var response = await accountService.UpdateUserAsync(user);

        if (!response.Flag)
        {
            IsBusy = false;
            ErrorMessage = response.Message;
            await toast.ShowError(response.Message);

        }
        else
        {
            await toast.ShowSuccess(response.Message);
            NavManager.NavigateTo("/admins/index", true);

        }

        IsBusy = false;
    }




}
