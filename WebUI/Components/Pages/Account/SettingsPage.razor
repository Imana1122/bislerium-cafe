@page "/settings"
@rendermode InteractiveServer
@attribute [Authorize]

<div class="container-fluid d-flex flex-column justify-content-center align-items-center">
    <div class="row justify-content-center">

        <EditForm Model="SettingsModel" method="post" OnValidSubmit="SettingsAsync" FormName="Settings" Enhance>
            <div class="card border-secondary shadow-sm text-dark p-5" style="border-radius: 24px; min-width: 300px;">
                <div class="card-header text-dark fs-4 border-primary">Settings</div>
                <div class="card-body">
                    <DataAnnotationsValidator />

                    <div class="mb-3">
                        <label for="name" class="form-label">Name</label>
                        <InputText id="name" @bind-Value="SettingsModel.Name" class="form-control" autocomplete="email" />
                    </div>

                    <div class="mb-3">
                        <label for="email" class="form-label">Email</label>
                        <InputText id="email" type="email" @bind-Value="SettingsModel.Email" class="form-control" />
                    </div>


                    <div class="mb-3">
                        <button class="btn btn-success w-100">Save</button>
                    </div>

                    <hr class="text-primary" />


                </div>

                <div class="card-footer mt-3">
                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <div class="alert alert-danger">@ErrorMessage</div>
                    }
                    else
                    {
                        <ValidationSummary class="text-danger" />
                    }
                </div>
            </div>
        </EditForm>
    </div>
    <div class="mt-3">
        <button type="button" class="btn btn-danger" @onclick="() => deleteConfirmPopup = true">Delete Account</button>
    </div>
</div>


@if (deleteConfirmPopup)
{
    <!-- Delete Confirmation Modal -->
    <div class="modal" tabindex="-1" role="dialog" style="display: block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmation Required</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="() => deleteConfirmPopup = false"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete the account?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" @onclick="DeleteAccount">Delete</button>
                    <button type="button" class="btn btn-secondary" @onclick="() => deleteConfirmPopup = false">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}



@code {

    private bool deleteConfirmPopup = false;
    string ErrorMessage = "";
    public bool IsBusy { get; set; } = false;
    private Guid UserId { get; set; }
    [SupplyParameterFromForm]
    private ChangeSettingsRequestDTO SettingsModel { get; set; } = new();

    private async Task SettingsAsync()
    {
        if (IsBusy) return;
        ErrorMessage = "";
        IsBusy = true;

        var response = await accountService.ChangeSettings(SettingsModel);
        if (!response.Flag)
        {
            IsBusy = false;
            ErrorMessage = response.Message;
            return;
        }
        else
        {
            await toast.ShowSuccess(response.Message);
        }
        IsBusy = false;
    }


    private async Task DeleteAccount()
    {
        if (IsBusy) return;

        ErrorMessage = "";
        IsBusy = true;

        SettingsModel.UserId = UserId;

        var response = await accountService.DeleteAccountAsync(UserId.ToString());

        if (!response.Flag)
        {
            IsBusy = false;
            ErrorMessage = response.Message;
            await toast.ShowError(response.Message);

        }
        else
        {
            await toast.ShowSuccess(response.Message);

            // JavaScript to submit the logout form asynchronously
            await js.InvokeVoidAsync("autoSubmitLogoutForm");
        }

        IsBusy = false;
    }


    [Inject]
    protected AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Retrieve the authentication state
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        // Check if the user is authenticated
        if (user.Identity.IsAuthenticated)
        {
            // Set the user ID in the blog model
            var userIdClaim = user.FindFirstValue(ClaimTypes.NameIdentifier);
            if (!string.IsNullOrEmpty(userIdClaim) && Guid.TryParse(userIdClaim, out Guid userId))
            {
                await GetUser(userId);
                // Set the user ID in the blog model
                SettingsModel.UserId = userId;
                UserId = userId;
            }
        }
       
    }


    private async Task GetUser(Guid UserId)
    {
        var response = await accountService.GetUserById(UserId.ToString());
        SettingsModel = response.Adapt(new ChangeSettingsRequestDTO());
    }





}
