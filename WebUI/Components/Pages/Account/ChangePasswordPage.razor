@page "/change-password"
@rendermode InteractiveServer
@attribute [Authorize]

<div class="container-fluid d-flex justify-content-center align-items-center">
    <div class="row justify-content-center">

        <EditForm Model="ChangePasswordModel" method="post" OnValidSubmit="ChangePasswordAsync" FormName="ChangePassword" Enhance>
            <div class="card border-secondary shadow-sm text-dark p-5" style="border-radius: 24px; min-width: 300px;">
                <div class="card-header text-dark fs-4 border-primary">ChangePassword</div>
                <div class="card-body">
                    <DataAnnotationsValidator />

                    <div class="mb-3">
                        <label for="password-old" class="form-label">Old Password</label>
                        <InputText id="password-old" @bind-Value="ChangePasswordModel.OldPassword" class="form-control" autocomplete="password" />
                    </div>

                    <div class="mb-3">
                        <label for="password" class="form-label">New Password</label>
                        <InputText id="password" type="password" @bind-Value="ChangePasswordModel.Password" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="password-confirm" class="form-label">Confirm New Password</label>
                        <InputText id="password-confirm" type="password" @bind-Value="ChangePasswordModel.ConfirmPassword" class="form-control" />
                    </div>

                    <div class="mb-3">
                        <button class="btn btn-success w-100">ChangePassword</button>
                    </div>

                    <hr class="text-primary" />

                   
                </div>

                <div class="card-footer mt-3">
                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <div class="alert alert-danger">@ErrorMessage</div>
                    }
                    else
                    {
                        <ValidationSummary class="text-danger" />
                    }
                </div>
            </div>
        </EditForm>
    </div>
</div>


@code {
    string ErrorMessage = "";
    public bool IsBusy { get; set; } = false;
    private Guid UserId { get; set; }
    [SupplyParameterFromForm]
    private ChangePasswordRequestDTO ChangePasswordModel { get; set; } = new();
    private async Task ChangePasswordAsync()
    {
        if (IsBusy) return;
        ErrorMessage = "";
        IsBusy = true;
        var response = await accountService.ChangePassword(ChangePasswordModel);

        if (!response.Flag)
        {
            IsBusy = false;
            ErrorMessage = response.Message;

            return;
        }
        else
        {
            await toast.ShowSuccess(response.Message);
        }

        IsBusy = false;
    }

    [Inject]
    protected AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Retrieve the authentication state
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        // Check if the user is authenticated
        if (user.Identity.IsAuthenticated)
        {
            // Set the user ID in the blog model
            if (Guid.TryParse(user.FindFirstValue(ClaimTypes.NameIdentifier), out Guid userId))
            {
                // Set the user ID in the blog model
                ChangePasswordModel.UserId = userId;
            }
        }
    }
    



}
