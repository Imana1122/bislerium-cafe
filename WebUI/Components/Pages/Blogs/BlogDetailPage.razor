@page "/blogs/{Id:guid}"
@rendermode InteractiveServer

<div class="d-flex justify-content-center align-content-center" style="width:100%">
    <!-- Blog details section -->
    <div class="d-flex flex-column gap-3" style="width:100%">
        <div class="col-md-10 d-md-flex gap-2 d-lg-flex gap-5">
            <!-- Carousel -->
            <div id="carouselExampleIndicators" class="carousel slide col-md-7 lg-col-7 bg-dark" data-ride="carousel">
                <!-- Indicators -->
                <div class="carousel-indicators">
                   
                    @if (blogModel != null && blogModel.Images != null && blogModel.Images.Any())
                    {
                        int index = 0;
                        foreach (var image in blogModel.Images)
                        {
                            <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="@index" class="@(index == 0 ? "active" : "")" aria-current="true" aria-label="Slide 1"></button>

                            index++;
                        }
                    }
                    else
                    {
                        <p>No images available.</p>
                    }

                </div>


                <!-- Wrapper for slides -->
                <div class="carousel-inner">
                    @if (blogModel != null && blogModel.Images != null && blogModel.Images.Any())
                    {
                        int slideIndex = 0;
                        foreach (var image in blogModel.Images)
                        {
                            <div class="carousel-item @(slideIndex == 0 ? "active" : "")">
                                <img class="d-block " style="width:100%;" src="@image.Image" alt="BLOG">
                            </div>
                            slideIndex++;
                        }
                    }
                </div>
                <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="prev">
                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Previous</span>
                </button>
                <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="next">
                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Next</span>
                </button>


            </div>

            <!-- Blog details -->
            <div class="mt-3 md-flex-grow-1 lg-flex-grow-1">
                <h2>@blogModel.Title</h2>
                <h4 class="my-4" style="color:lightslategray">@blogModel.BloggerName</h4>
                <div class="d-flex gap-2 align-items-center ">
                    <i class="bi bi-clock-fill text-primary icon"></i> <h6>Created at @blogModel.CreatedAt.ToString("MMM dd, yyyy hh:mm tt")</h6>
                </div>
                <div class="d-flex gap-2 align-items-center mt-2">
                    <i class="bi bi-clock-fill text-primary icon"></i> <h6>Updated at @blogModel.CreatedAt.ToString("MMM dd, yyyy hh:mm tt")</h6>
                </div>
               
               
                
                <!-- Blog stats -->
                <div class="row justify-content-between align-items-center mt-3" style="width:100%">
                    <!-- Upvote and Downvote section -->
                    <div class="col-auto d-flex align-items-center gap-2">
                        <!-- Upvote -->
                        @if (blogModel.UpvotedStatus)
                        {
                            <i class="bi bi-arrow-up-square-fill text-primary icon" @onclick="@(() => RemoveReaction(blogModel.Id))" style="cursor:pointer"></i> <!-- Filled upvote icon -->
                        }
                        else
                        {
                            <i class="bi bi-arrow-up-square text-secondary icon" @onclick="@(() => Upvote(blogModel.Id))" style="cursor:pointer"></i> <!-- Empty upvote icon -->
                        }
                        <p class="m-0 text">@blogModel.UpvoteCount</p>
                        <!-- Downvote -->
                        @if (blogModel.DownvotedStatus)
                        {
                            <i class="bi bi-arrow-down-square-fill text-danger icon" @onclick="@(()=>RemoveReaction(blogModel.Id))" style="cursor:pointer"></i> <!-- Filled downvote icon -->
                        }
                        else
                        {
                            <i class="bi bi-arrow-down-square text-secondary icon" @onclick="@(()=>Downvote(blogModel.Id))" style="cursor:pointer"></i> <!-- Empty downvote icon -->
                        }
                        <p class="m-0 text">@blogModel.DownvoteCount</p>
                    </div>
                    <!-- Comments count -->
                    <div class="col-auto d-flex align-items-center gap-2" @onclick="@(()=>showComments(blogModel.Id))">
                        <i class="bi bi-chat-text text-secondary icon" style="cursor:pointer"></i>
                        <p class="m-0 text">@blogModel.CommentsCount</p>
                    </div>
                </div>
            </div>

            
        </div>
        <div class="col-md-10 " style="margin:2px;">
            <p>@blogModel.Description</p>
        </div>
    </div>
</div>

@if (isLoginPopUp)
{
    <!-- Login Modal -->
    <div class="modal" tabindex="-1" role="dialog" style="display: @(isLoginPopUp ? "block" : "none")">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Login Required</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="() => isLoginPopUp = false"></button>
                </div>
                <div class="modal-body">
                    <p>You need to be logged in to perform this action.</p>
                </div>
                <div class="modal-footer">
                    <a href="Account/Login"> <button type="button" class="btn btn-primary">Login</button></a>
                    <button type="button" class="btn btn-secondary" @onclick="() => isLoginPopUp = false">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}
@if (isCommentModalOpen)
{
    <!-- Login Modal -->
    <div class="modal" tabindex="-1" role="dialog" style="display: @(isCommentModalOpen ? "block" : "none")">
        <div class="modal-dialog" role="document">
            <div class="modal-content">

                <div class="modal-header">
                    <h5 class="modal-title">Comments</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="Refresh"></button>
                </div>
                <div class="modal-body">
                    <AuthorizeView Policy="UserPolicy">
                    <!-- Comment input field -->
                    <input type="text" class="form-control mb-3" placeholder="Write your comment..." @bind="comment.Comment" />
                    <!-- Button to submit comment -->
                    <button type="button" class="btn btn-primary" @onclick="@(()=>SaveComment(Id))">Add Comment</button>
                    </AuthorizeView>
                    <!-- Scrollable section for comments -->
                    <div class="mt-3" style="max-height: 300px; overflow-y: auto;">
                        @if (comments.Any())
                        {

                            @foreach (var comment in comments)
                            {
                                <div class=" d-flex justify-content-between flex-column bg-light rounded mb-3 p-3 ">
                                    <div class=" d-flex justify-content-between align-items-center mb-2">
                                        <div>
                                            <div class="fw-bold">@comment.User.Name</div>
                                            <div>@comment.Comment</div>
                                        </div>
                                        <div>
                                            <!-- Display delete icon if the comment belongs to the current user -->
                                            @if (comment.UserId == UserId)
                                            {
                                                <button class="btn btn-sm btn-danger" @onclick="() => DeleteComment()">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            }
                                        </div>

                                    </div>
                                    <div class="row justify-content-between align-items-center mt-3" style="width:100%">
                                        <!-- Upvote and Downvote section -->
                                        <div class="col-auto d-flex align-items-center gap-2">
                                   
                                            <!-- Upvote -->
                                            @if (comment.UpvotedStatus)
                                            {
                                                <i class="bi bi-arrow-up-square-fill text-primary" @onclick="@(() => RemoveCommentReaction(comment.UserId))" style="cursor:pointer"></i> <!-- Filled upvote icon -->
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-up-square text-secondary" @onclick="@(() => UpvoteComment(comment.UserId))" style="cursor:pointer"></i> <!-- Empty upvote icon -->
                                            }
                                            <p class="m-0">@comment.UpvoteCount</p>
                                     
                                            <!-- Downvote -->
                                            @if (comment.DownvotedStatus)
                                            {
                                                <i class="bi bi-arrow-down-square-fill text-danger" @onclick="@(()=>RemoveCommentReaction(comment.UserId))" style="cursor:pointer"></i> <!-- Filled downvote icon -->
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-square text-secondary" @onclick="@(()=>DownvoteComment(comment.UserId))" style="cursor:pointer"></i> <!-- Empty downvote icon -->
                                            }
                                            <p class="m-0">@comment.DownvoteCount</p>
                                        </div>
                                    <!-- Date  -->
                                    <div class="col-auto d-flex align-items-center gap-2">
                                        <i class="bi bi-calender text-secondary icon" style="cursor:pointer"></i>
                                            <p class="m-0 text-sm">@comment.UpdatedAt.ToString("MMM dd, yyyy hh:mm tt")</p>
                                    </div>
                                    </div>
                                </div>
                            }

                        }
                        else
                        {
                            <p>No comments available.</p>
                        }
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="Refresh">Close</button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    [Parameter] // Parameter to capture the addin Id from the route /EditAddin/{Id:guid}
    public Guid Id { get; set; }

    [SupplyParameterFromForm]
    private GetBlogsResponseDTO blogModel { get; set; } = new();

    public Guid UserId { get; set; }

    private IEnumerable<GetBlogCommentResponseDTO> comments { get; set; } = [];
    private bool isLoginPopUp = false;
    private bool isCommentModalOpen = false;
    [SupplyParameterFromForm]

    private UpdateBlogCommentRequestDTO comment { get; set; } = new();
    private HubConnection hubConnection;


    [Inject]
    protected AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Retrieve the authentication state
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        // Check if the user is authenticated
        if (user.Identity.IsAuthenticated)
        {
            // Set the user ID in the blog model
            if (Guid.TryParse(user.FindFirstValue(ClaimTypes.NameIdentifier), out Guid userId))
            {
                // Set the user ID in the blog model
                blogModel.UserId = userId;
                UserId = userId;
                hubConnection = netcodeHubConnectionService.GetHubConnection();
                if (hubConnection.State == HubConnectionState.Disconnected)
                {
                    await hubConnection.StartAsync();
                }
            }
        }

        var scope = serviceProvider.CreateScope();
        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
        var command = new GetBlogByIdCommand(Id, UserId); // Update an instance of UpdateBlogCommand
        var response = await mediator.Send(command); // Send the command using MediatR
        blogModel = response;



    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await js.InvokeVoidAsync("carouselSetup");
        }
    }

    public void Refresh()
    {
        NavManager.NavigateTo("/blogs/"+Id, true);
    }


    [CascadingParameter]
    public Task<AuthenticationState> ClientAuthState { get; set; }


    public async Task Upvote(Guid BlogId)
    {
        if (ClientAuthState != null)
        {

            if ((await ClientAuthState!).User.Identity!.IsAuthenticated == true)
            {
                await UpdateReaction("Upvote", BlogId);

            }
            else
            {
                isLoginPopUp = true;

            }
        }


    }
    public async Task Downvote(Guid BlogId)
    {
        if (ClientAuthState != null)
        {

            if ((await ClientAuthState!).User.Identity!.IsAuthenticated == true)
            {
                await UpdateReaction("Downvote", BlogId);

            }
            else
            {
                isLoginPopUp = true;

            }
        }


    }
    public async Task UpdateReaction(string reaction, Guid BlogId)
    {
        var scope = serviceProvider.CreateScope();
        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
        var data = new UpdateBlogReactionRequestDTO
            {
                Reaction = reaction,
                UserId = UserId,
                BlogId = BlogId
            };
        var command = new UpdateBlogReactionCommand(data);
        var response = await mediator.Send(command);
        if (response.Flag)
        {
            await toast.ShowSuccess("Reacted successfully");
            await hubConnection.InvokeAsync("Notification", blogModel.UserId.ToString().ToLower(), "Your blog is reacted.");

            NavManager.NavigateTo("/blogs/"+Id, true);
        }
        else
        {
            await toast.ShowError(response.Message);
        }


    }

    public async Task RemoveReaction(Guid BlogId)
    {
        if (ClientAuthState != null)
        {

            if ((await ClientAuthState!).User.Identity!.IsAuthenticated == true)
            {

                var scope = serviceProvider.CreateScope();
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();

                var command = new DeleteBlogReactionCommand(UserId, BlogId);
                var response = await mediator.Send(command);
                if (response.Flag)
                {
                    await toast.ShowSuccess("Reaction removed successfully");
                    await hubConnection.InvokeAsync("Notification", blogModel.UserId.ToString().ToLower(), "Your blog is unreacted.");

                    NavManager.NavigateTo("/blogs/" + Id, true);
                }
                else
                {
                    await toast.ShowError(response.Message);
                }
            }
            else
            {
                isLoginPopUp = true;

            }
        }

    }

    public async Task showComments(Guid Id)
    {
        try
        {
            await GetComments(Id);

            isCommentModalOpen = true;
        }
        catch (Exception ex)
        {
            await toast.ShowError(ex.Message);
            Console.Write(ex);
        }

    }



    public async Task GetComments(Guid BlogId)
    {
        try
        {
            var scope = serviceProvider.CreateScope();
            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
            var command = new GetAllBlogCommentsByBlogIdQuery(BlogId,UserId); // Update an instance of GetAllBlogCommentsByBlogIdQuery
            var response = await mediator.Send(command); // Send the command using MediatR

            // Convert IEnumerable to a mutable List<T>
            var commentsList = response.ToList();

            // Filter comments to get the comment where UserId equals the specified UserId
            var userComment = commentsList.FirstOrDefault(comment => comment.UserId == UserId);

            // If a comment by the specified UserId exists, move it to index 0
            if (userComment != null)
            {
                comment.Comment = userComment.Comment;
                commentsList.Remove(userComment); // Remove the comment from its current position
                commentsList.Insert(0, userComment); // Insert the comment at index 0
            }

            // Assign the modified comments list back to comments if needed
            comments = commentsList;
        }
        catch (Exception ex)
        {
            // Handle exceptions
            Console.WriteLine($"An error occurred: {ex.Message}");
        }



    }

    public async Task SaveComment(Guid BlogId)
    {
        try
        {
            if (ClientAuthState != null)
            {

                if ((await ClientAuthState!).User.Identity!.IsAuthenticated == true)
                {

                    var scope = serviceProvider.CreateScope();
                    var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                    comment.BlogId = BlogId;
                    comment.UserId = UserId;
                    var command = new UpdateBlogCommentCommand(comment);
                    var response = await mediator.Send(command);
                    if (response.Flag)
                    {
                        await GetComments(BlogId);
                        await toast.ShowSuccess("Comment saved successfully");
                        await hubConnection.InvokeAsync("Notification", blogModel.UserId.ToString().ToLower(), "Your blog is commented.");

                    }
                    else
                    {
                        await toast.ShowError(response.Message);
                    }
                }
                else
                {
                    isLoginPopUp = true;

                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }

    }
    public async Task DeleteComment()
    {
        try
        {
            if (ClientAuthState != null)
            {

                if ((await ClientAuthState!).User.Identity!.IsAuthenticated == true)
                {

                    var scope = serviceProvider.CreateScope();
                    var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();

                    var command = new DeleteBlogCommentCommand(UserId, Id);
                    var response = await mediator.Send(command);
                    if (response.Flag)
                    {
                        comment = new UpdateBlogCommentRequestDTO();
                        await GetComments(Id);

                        await toast.ShowSuccess("Comment deleted successfully");
                        await hubConnection.InvokeAsync("Notification", blogModel.UserId.ToString().ToLower(), "Your blog is uncommented.");

                    }
                    else
                    {
                        await toast.ShowError(response.Message);
                    }
                }
                else
                {
                    isLoginPopUp = true;

                }

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }

    }

    public async Task UpvoteComment(Guid CommentUserId)
    {
        if (ClientAuthState != null)
        {

            if ((await ClientAuthState!).User.Identity!.IsAuthenticated == true)
            {
                await UpdateCommentReaction("Upvote",  CommentUserId);

            }
            else
            {
                isCommentModalOpen = false;

                isLoginPopUp = true;

            }
        }


    }
    public async Task DownvoteComment(Guid CommentUserId)
    {
        if (ClientAuthState != null)
        {

            if ((await ClientAuthState!).User.Identity!.IsAuthenticated == true)
            {
                await UpdateCommentReaction("Downvote", CommentUserId);

            }
            else
            {
                isCommentModalOpen = false;
                isLoginPopUp = true;

            }
        }


    }
    public async Task UpdateCommentReaction(string reaction, Guid CommentUserId)
    {
        var scope = serviceProvider.CreateScope();
        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
        var data = new UpdateBlogCommentReactionRequestDTO
            {
                Reaction = reaction,
                UserId = UserId,
                BlogId = blogModel.Id,
                CommentUserId = CommentUserId
            };

        var command = new UpdateBlogCommentReactionCommand(data);
        var response = await mediator.Send(command);
        if (response.Flag)
        {
            await GetComments(Id);
            await toast.ShowSuccess("Reaction updated successfully");
            await hubConnection.InvokeAsync("Notification", CommentUserId.ToString().ToLower(), "Your comment is reacted.");

        }
        else
        {
            await toast.ShowError(response.Message);
        }


    }

    public async Task RemoveCommentReaction(Guid CommentUserId)
    {
        if (ClientAuthState != null)
        {

            if ((await ClientAuthState!).User.Identity!.IsAuthenticated == true)
            {

                var scope = serviceProvider.CreateScope();
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();

                var command = new DeleteBlogCommentReactionCommand(UserId, blogModel.UserId, CommentUserId);
                var response = await mediator.Send(command);
                if (response.Flag)
                {
                    await GetComments(Id);

                    await toast.ShowSuccess("Reaction removed successfully");
                    await hubConnection.InvokeAsync("Notification", CommentUserId.ToString().ToLower(), "Your comment is unreacted.");

                }
                else
                {
                    await toast.ShowError(response.Message);
                }
            }
            else
            {
                isCommentModalOpen = false;

                isLoginPopUp = true;

            }
        }

    }

    

   
}
