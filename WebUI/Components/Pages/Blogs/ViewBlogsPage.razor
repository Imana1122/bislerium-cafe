@page "/blogs/index"
@attribute [Authorize(Policy = "UserPolicy")]
@rendermode InteractiveServer

<div class="d-flex flex-column justify-content-center align-content-center" style="width:70rem">
    <section class="content-header">
        <div class="container-fluid my-2">
            <div class="row mb-2">
                <div class="col-sm-6">
                    <h1>Blogs</h1>
                </div>
                <div class="col-sm-6 text-right">
                    <a href="blogs/create" class="btn btn-primary">New Blog</a>
                </div>
            </div>
        </div>
        <!-- /.container-fluid -->
    </section>
    <!-- Main content -->
    <section class="content">
        <div class="container-fluid">
            <div class="card">
                
                <div class="card-body table-responsive " style="width:100%; overflow:auto;">                    

                    <Grid TItem="GetBlogsResponseDTO" class="table table-hover table-bordered table-striped" DataProvider="BlogsDataProvider" AllowFiltering="true" Responsive="true" AllowPaging="true" PageSize="5"  AllowSorting="true">
                        <GridColumn TItem="GetBlogsResponseDTO" HeaderText="Title" PropertyName="Title" >
                            <a href="/blogs/@context.Id">
                                @if (context.Title.Length > 20)
                                {
                                    <text>@(context.Title.Substring(0, 20))...</text>
                                }
                                else
                                {
                                    <text>@context.Title</text>
                                }
                            </a>
                        </GridColumn>
                        <GridColumn TItem="GetBlogsResponseDTO" HeaderText="Description" PropertyName="Description" Filterable="false">
                            @if (context.Description.Length > 20)
                            {
                            <text>@(context.Description.Substring(0, 20))...</text>
                            }
                            else
                            {
                            <text>@context.Description</text>
                            }
                        </GridColumn>
                        <GridColumn TItem="GetBlogsResponseDTO" HeaderText="Upvotes" PropertyName="UpvoteCount" SortKeySelector="item => item.Id" Filterable="false">
                           @context.UpvoteCount
                        </GridColumn>
                        <GridColumn TItem="GetBlogsResponseDTO" HeaderText="Downvotes" PropertyName="DownvoteCount" SortKeySelector="item => item.Id" Filterable="false">
                            @context.DownvoteCount
                        </GridColumn>
                        <GridColumn TItem="GetBlogsResponseDTO" HeaderText="Popularity" PropertyName="PopularityCount" SortKeySelector="item => item.Id" Filterable="false">
                            @context.PopularityCount
                        </GridColumn>
                        <GridColumn TItem="GetBlogsResponseDTO" HeaderText="Created At" PropertyName="CreatedAt" SortKeySelector="item => item.Id" Filterable="false">
                            @context.CreatedAt.ToString("MMMM dd, yyyy")
                        </GridColumn>
                        <GridColumn TItem="GetBlogsResponseDTO" HeaderText="Action" PropertyName="Action" Filterable="false">
                            <a href="/blogs/edit/@context.Id">
                                <svg class="filament-link-icon w-4 h-4 mr-1" style="width:20px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                    <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z"></path>
                                </svg>
                            </a>
                            <a href="#" @onclick="() => {BlogId=context.Id; deleteConfirmPopup = true; }" class="text-danger w-4 h-4 mr-1">
                                <svg wire:loading.remove.delay="" style="width:20px" wire:target="" class="filament-link-icon w-4 h-4 mr-1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                    <path ath fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                                </svg>
                            </a>
                        </GridColumn>
                        
                    </Grid>
                    
                </div>
            </div>
            <div class="card-footer mt-3">
                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <div class="alert alert-danger">@ErrorMessage</div>
                }
               
            </div>
        </div>
    </section>


    @if (deleteConfirmPopup)
    {
        <!-- Delete Confirmation Modal -->
        <div class="modal" tabindex="-1" role="dialog" style="display: block;">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirmation Required</h5>
                        <button type="button" class="btn-close" aria-label="Close" @onclick="() => deleteConfirmPopup = false"></button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to delete the blog?</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-danger" @onclick="DeleteBlog">Delete</button>
                        <button type="button" class="btn btn-secondary" @onclick="() => deleteConfirmPopup = false">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private bool deleteConfirmPopup = false;
    string ErrorMessage = "";
    private Guid BlogId { get; set; } 
    public bool IsBusy { get; set; } = false;
    public IEnumerable<GetBlogsResponseDTO> Blogs { get; set; } = [];
    private Guid UserId;
    

    [Inject]
    protected AuthenticationStateProvider AuthenticationStateProvider { get; set; }
    protected override async void  OnInitialized()
    {
        // Retrieve the authentication state
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        // Check if the user is authenticated
        if (user.Identity.IsAuthenticated)
        {
            // Set the user ID in the blog model
            if (Guid.TryParse(user.FindFirstValue(ClaimTypes.NameIdentifier), out Guid userId))
            {
                // Set the user ID in the blog model
                UserId = userId;
            }

        }

        var scope = serviceProvider.CreateScope();
        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
        // Send the GetAllBlogsOfUserQuery
        var result = await mediator.Send(new GetAllBlogsOfUserQuery(UserId));

        Blogs = result;
       
    }



    private async Task DeleteBlog()
    {
        if (IsBusy) return;
        ErrorMessage = "";
        IsBusy = true;
        var scope = serviceProvider.CreateScope();
        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
        var command = new DeleteBlogCommand(BlogId); 
        var response = await mediator.Send(command); // Send the command using MediatR
        if (!response.Flag)
        {
            IsBusy = false;
            ErrorMessage = response.Message;
            return;
        }
        else
        {
            await toast.ShowSuccess(response.Message);

        }
        BlogId = Guid.Empty;

        IsBusy = false;
        deleteConfirmPopup = false;
        NavManager.NavigateTo("/blogs/index");


    }

    private async Task<GridDataProviderResult<GetBlogsResponseDTO>> BlogsDataProvider(GridDataProviderRequest<GetBlogsResponseDTO> request)
    {
        return await Task.FromResult(request.ApplyTo(Blogs));
    }

   

   


}
