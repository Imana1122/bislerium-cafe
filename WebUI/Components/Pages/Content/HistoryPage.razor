@page "/history"
@attribute [Authorize(Policy = "UserPolicy")]
@using Domain.Entities

<div class="d-flex flex-column justify-content-center align-content-center" style="width:70rem">
    <section class="content-header">
        <div class="container-fluid my-2">
            <div class="row mb-2">
                <div class="col-sm-6">
                    <h2>Histories</h2>
                </div>

            </div>
        </div>
        <!-- /.container-fluid -->
    </section>
    <!-- Main content -->
    <section class="content">
        <div class="container-fluid">
            <div class="card">

                <div class="card-body table-responsive " style="overflow:auto;">

                    <Grid TItem="History" class="table table-hover table-bordered overflow-auto table-striped" DataProvider="HistoriesDataProvider" AllowFiltering="true" Responsive="true" AllowPaging="true" PageSize="5" AllowSorting="true" PageSizeSelectorItems=[5,10,15,20] PageSizeSelectorVisible="true">
                        <GridColumn TItem="History" HeaderText="Content" PropertyName="Content">
                            
                                @if (context.Content.Length > 100)
                                {
                                    <text>@(context.Content.Substring(0, 100))...</text>
                                }
                                else
                                {
                                    <text>@context.Content</text>
                                }
                            
                        </GridColumn>

                        <GridColumn TItem="History" HeaderText="Created At" PropertyName="CreatedAt" SortKeySelector="item => item.Id">
                            @context.CreatedAt.ToString("MMMM dd, yyyy")
                        </GridColumn>


                    </Grid>

                </div>
            </div>

        </div>
    </section>



</div>

@code {
    public IEnumerable<History> Histories { get; set; } = [];


    [Inject]
    protected AuthenticationStateProvider AuthenticationStateProvider { get; set; }
    protected override async Task OnInitializedAsync()
    {
        // Retrieve the authentication state
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        // Check if the user is authenticated
        if (user.Identity.IsAuthenticated)
        {
            // Set the user ID in the blog model
            if (Guid.TryParse(user.FindFirstValue(ClaimTypes.NameIdentifier), out Guid userId))
            {
                // Set the user ID in the blog model
                var scope = serviceProvider.CreateScope();
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                // Send the GetAllHistoriesOfUserQuery
                var result = await mediator.Send(new GetUserHistoryQuery(userId));

                Histories = result.OrderByDescending(_ => _.CreatedAt);
            }

        }



    }

    private async Task<GridDataProviderResult<History>> HistoriesDataProvider(GridDataProviderRequest<History> request)
    {
        if (Histories.Count() <= 0)
        {
            // Retrieve the authentication state
            var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authenticationState.User;

            // Check if the user is authenticated
            if (user.Identity.IsAuthenticated)
            {
                // Set the user ID in the blog model
                if (Guid.TryParse(user.FindFirstValue(ClaimTypes.NameIdentifier), out Guid UserId))
                {
                    // Set the user ID in the blog model
                    var scope = serviceProvider.CreateScope();
                    var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                    // Send the GetAllNotificationsOfUserQuery
                    var result = await mediator.Send(new GetUserHistoryQuery(UserId));

                    Histories = result.OrderByDescending(_ => _.CreatedAt);
                }
            }

        }
        return await Task.FromResult(request.ApplyTo(Histories));
    }






}
